{"ast":null,"code":"var _jsxFileName = \"C:\\\\javascript\\\\weather\\\\src\\\\features\\\\Form\\\\components\\\\Form.jsx\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Button } from 'reactstrap';\nimport styles from '../styles.scss';\n\nconst validate = values => {\n  const errors = {};\n  if (!values.FirstName) errors.FirstName = 'Povinne pole';\n  if (!values.Email) errors.Email = 'Povinne pole';\n  return errors;\n}; // const renderField = ({ input, meta, label, type }) => (\n//   <div\n//     className={[\n//       meta.error && meta.touched ? 'error' : '',\n//       meta.active ? 'actived' : '',\n//     ].join(' ')}\n//   >\n//     <pre>{JSON.stringify(meta, null, 2)}</pre>\n//     <label>{label}</label>\n//     <input {...input} placeholder={label} type={type} />\n//     {meta.error && meta.touched && (\n//       <span className=\"error-quote\">{meta.error}</span>\n//     )}\n//   </div>\n// )\n\n\nconst formElement = render => ({\n  input,\n  meta,\n  label,\n  type\n}) => React.createElement(\"div\", {\n  className: [meta.error && meta.touched ? 'error' : '', meta.active ? 'actived' : ''].join(' '),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, React.createElement(\"pre\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, JSON.stringify(meta, null, 2)), React.createElement(\"label\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, label), render(input, label), React.createElement(\"input\", Object.assign({}, input, {\n  placeholder: label,\n  type: type,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n})), meta.error && meta.touched && React.createElement(\"span\", {\n  className: \"error-quote\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}, meta.error));\n\nconst renderInput = formElement((input, label) => React.createElement(\"input\", Object.assign({}, input, {\n  placeholder: label,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 49\n  },\n  __self: this\n})));\n\nconst Form = ({\n  handleSubmit,\n  showData,\n  submitting\n}) => {\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit(showData),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"text\",\n    component: renderInput,\n    label: \"Krestni jmeno\",\n    name: \"FirstName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"text\",\n    component: renderInput,\n    label: \"Email\",\n    name: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(Field, {\n    type: \"checkbox\",\n    component: renderInput,\n    label: \"GDPR\",\n    name: \"GDPR\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(Button, {\n    disabled: submitting,\n    color: \"danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Odeslat\"));\n};\n\nexport default reduxForm({\n  form: 'testForm',\n  validate: validate\n})(Form);","map":{"version":3,"sources":["C:/javascript/weather/src/features/Form/components/Form.jsx"],"names":["React","Field","reduxForm","Button","styles","validate","values","errors","FirstName","Email","formElement","render","input","meta","label","type","error","touched","active","join","JSON","stringify","renderInput","Form","handleSubmit","showData","submitting","form"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { Button } from 'reactstrap'\r\nimport styles from '../styles.scss'\r\n\r\nconst validate = values => {\r\n  const errors = {}\r\n\r\n  if (!values.FirstName) errors.FirstName = 'Povinne pole'\r\n  if (!values.Email) errors.Email = 'Povinne pole'\r\n\r\n  return errors\r\n}\r\n\r\n// const renderField = ({ input, meta, label, type }) => (\r\n//   <div\r\n//     className={[\r\n//       meta.error && meta.touched ? 'error' : '',\r\n//       meta.active ? 'actived' : '',\r\n//     ].join(' ')}\r\n//   >\r\n//     <pre>{JSON.stringify(meta, null, 2)}</pre>\r\n//     <label>{label}</label>\r\n//     <input {...input} placeholder={label} type={type} />\r\n//     {meta.error && meta.touched && (\r\n//       <span className=\"error-quote\">{meta.error}</span>\r\n//     )}\r\n//   </div>\r\n// )\r\n\r\nconst formElement = render => ({ input, meta, label, type }) => (\r\n  <div\r\n    className={[\r\n      meta.error && meta.touched ? 'error' : '',\r\n      meta.active ? 'actived' : '',\r\n    ].join(' ')}\r\n  >\r\n    <pre>{JSON.stringify(meta, null, 2)}</pre>\r\n    <label>{label}</label>\r\n    {render(input, label)}\r\n    <input {...input} placeholder={label} type={type} />\r\n    {meta.error && meta.touched && (\r\n      <span className=\"error-quote\">{meta.error}</span>\r\n    )}\r\n  </div>\r\n)\r\n\r\nconst renderInput = formElement((input, label) => (\r\n  <input {...input} placeholder={label} />\r\n))\r\n\r\nconst Form = ({ handleSubmit, showData, submitting }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit(showData)}>\r\n      <Field\r\n        type=\"text\"\r\n        component={renderInput}\r\n        label=\"Krestni jmeno\"\r\n        name=\"FirstName\"\r\n      />\r\n      <Field type=\"text\" component={renderInput} label=\"Email\" name=\"Email\" />\r\n      <Field type=\"checkbox\" component={renderInput} label=\"GDPR\" name=\"GDPR\" />\r\n      <br />\r\n      <Button disabled={submitting} color=\"danger\">\r\n        Odeslat\r\n      </Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm({\r\n  form: 'testForm',\r\n  validate: validate,\r\n})(Form)\r\n"]},"metadata":{},"sourceType":"module"}