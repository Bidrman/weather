{"ast":null,"code":"var _jsxFileName = \"C:\\\\javascript\\\\s1-redux\\\\src\\\\features\\\\Weather\\\\containers\\\\WeatherFormContainer.jsx\";\nimport React from 'react';\nimport WeatherForm from '../components/WeatherForm';\nimport { connect } from 'react-redux';\nimport { SET_CITY, ADD_CITY, RESET_CITY } from '../store/actions';\n\nconst mapStateToProps = state => {\n  return {\n    targetCity: state.weather.targetCity,\n    cities: state.weather.cities\n  };\n};\n\nconst fetchWeather = cityName => {\n  return fetch(`https://api.weatherbit.io/v2.0/forecast/hourly?city=${cityName},cz&key=165c8bbb35604923b89f37cf29003df3&hours=2`).then(response => {\n    if (response.status !== 200) {\n      alert('Request status = ' + response.status);\n    }\n\n    return response.json();\n  }).then(data => {\n    //console.log('DATA: ', data)\n    console.log(data.data.map(item => item.temp));\n    return data;\n  });\n};\n\nconst mapDispatchToProps = dispatch => {\n  const setCity = event => dispatch({\n    type: SET_CITY,\n    payload: event.target.value\n  });\n\n  const addCity = cityName => {\n    fetchWeather(cityName).then(data => dispatch({\n      type: ADD_CITY,\n      payload: data\n    }));\n  };\n\n  const resetCity = () => dispatch({\n    type: SET_CITY,\n    payload: ''\n  });\n\n  const addCityAndReset = cityName => {\n    addCity(cityName);\n    resetCity();\n  };\n\n  return {\n    setCity: setCity,\n    addCityAndReset: addCityAndReset\n  };\n};\n\nconst WeatherFormContainer = ({\n  targetCity,\n  setCity,\n  addCityAndReset\n}) => {\n  return React.createElement(WeatherForm, {\n    setCity: setCity,\n    city: targetCity,\n    addCityAndReset: addCityAndReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  });\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherFormContainer);","map":{"version":3,"sources":["C:/javascript/s1-redux/src/features/Weather/containers/WeatherFormContainer.jsx"],"names":["React","WeatherForm","connect","SET_CITY","ADD_CITY","RESET_CITY","mapStateToProps","state","targetCity","weather","cities","fetchWeather","cityName","fetch","then","response","status","alert","json","data","console","log","map","item","temp","mapDispatchToProps","dispatch","setCity","event","type","payload","target","value","addCity","resetCity","addCityAndReset","WeatherFormContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,UAA7B,QAA+C,kBAA/C;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLC,IAAAA,UAAU,EAAED,KAAK,CAACE,OAAN,CAAcD,UADrB;AAELE,IAAAA,MAAM,EAAEH,KAAK,CAACE,OAAN,CAAcC;AAFjB,GAAP;AAID,CALD;;AAOA,MAAMC,YAAY,GAAGC,QAAQ,IAAI;AAC/B,SAAOC,KAAK,CACT,uDAAsDD,QAAS,kDADtD,CAAL,CAGJE,IAHI,CAGCC,QAAQ,IAAI;AAChB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,MAAAA,KAAK,CAAC,sBAAsBF,QAAQ,CAACC,MAAhC,CAAL;AACD;;AACD,WAAOD,QAAQ,CAACG,IAAT,EAAP;AACD,GARI,EASJJ,IATI,CASCK,IAAI,IAAI;AACZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACA,IAAL,CAAUG,GAAV,CAAcC,IAAI,IAAIA,IAAI,CAACC,IAA3B,CAAZ;AAEA,WAAOL,IAAP;AACD,GAdI,CAAP;AAeD,CAhBD;;AAkBA,MAAMM,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,QAAMC,OAAO,GAAGC,KAAK,IACnBF,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE1B,QAAR;AAAkB2B,IAAAA,OAAO,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAxC,GAAD,CADV;;AAEA,QAAMC,OAAO,GAAGrB,QAAQ,IAAI;AAC1BD,IAAAA,YAAY,CAACC,QAAD,CAAZ,CAAuBE,IAAvB,CAA4BK,IAAI,IAC9BO,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEzB,QAAR;AAAkB0B,MAAAA,OAAO,EAAEX;AAA3B,KAAD,CADV;AAGD,GAJD;;AAKA,QAAMe,SAAS,GAAG,MAAMR,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAE1B,QAAR;AAAkB2B,IAAAA,OAAO,EAAE;AAA3B,GAAD,CAAhC;;AACA,QAAMK,eAAe,GAAGvB,QAAQ,IAAI;AAClCqB,IAAAA,OAAO,CAACrB,QAAD,CAAP;AACAsB,IAAAA,SAAS;AACV,GAHD;;AAKA,SAAO;AACLP,IAAAA,OAAO,EAAEA,OADJ;AAELQ,IAAAA,eAAe,EAAEA;AAFZ,GAAP;AAID,CAlBD;;AAoBA,MAAMC,oBAAoB,GAAG,CAAC;AAAE5B,EAAAA,UAAF;AAAcmB,EAAAA,OAAd;AAAuBQ,EAAAA;AAAvB,CAAD,KAA8C;AACzE,SACE,oBAAC,WAAD;AACE,IAAA,OAAO,EAAER,OADX;AAEE,IAAA,IAAI,EAAEnB,UAFR;AAGE,IAAA,eAAe,EAAE2B,eAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CARD;;AAUA,eAAejC,OAAO,CACpBI,eADoB,EAEpBmB,kBAFoB,CAAP,CAGbW,oBAHa,CAAf","sourcesContent":["import React from 'react'\r\nimport WeatherForm from '../components/WeatherForm'\r\nimport { connect } from 'react-redux'\r\nimport { SET_CITY, ADD_CITY, RESET_CITY } from '../store/actions'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    targetCity: state.weather.targetCity,\r\n    cities: state.weather.cities,\r\n  }\r\n}\r\n\r\nconst fetchWeather = cityName => {\r\n  return fetch(\r\n    `https://api.weatherbit.io/v2.0/forecast/hourly?city=${cityName},cz&key=165c8bbb35604923b89f37cf29003df3&hours=2`,\r\n  )\r\n    .then(response => {\r\n      if (response.status !== 200) {\r\n        alert('Request status = ' + response.status)\r\n      }\r\n      return response.json()\r\n    })\r\n    .then(data => {\r\n      //console.log('DATA: ', data)\r\n      console.log(data.data.map(item => item.temp))\r\n\r\n      return data\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  const setCity = event =>\r\n    dispatch({ type: SET_CITY, payload: event.target.value })\r\n  const addCity = cityName => {\r\n    fetchWeather(cityName).then(data =>\r\n      dispatch({ type: ADD_CITY, payload: data }),\r\n    )\r\n  }\r\n  const resetCity = () => dispatch({ type: SET_CITY, payload: '' })\r\n  const addCityAndReset = cityName => {\r\n    addCity(cityName)\r\n    resetCity()\r\n  }\r\n\r\n  return {\r\n    setCity: setCity,\r\n    addCityAndReset: addCityAndReset,\r\n  }\r\n}\r\n\r\nconst WeatherFormContainer = ({ targetCity, setCity, addCityAndReset }) => {\r\n  return (\r\n    <WeatherForm\r\n      setCity={setCity}\r\n      city={targetCity}\r\n      addCityAndReset={addCityAndReset}\r\n    />\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(WeatherFormContainer)\r\n"]},"metadata":{},"sourceType":"module"}