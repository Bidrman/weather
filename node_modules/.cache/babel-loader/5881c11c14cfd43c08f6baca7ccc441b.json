{"ast":null,"code":"var _jsxFileName = \"C:\\\\javascript\\\\s1-redux\\\\src\\\\features\\\\Weather\\\\containers\\\\WeatherFormContainer.jsx\";\nimport React from 'react';\nimport WeatherForm from '../components/WeatherForm';\nimport { connect } from 'react-redux';\nimport { SET_CITY, ADD_CITY, RESET_CITY } from '../store/actions';\n\nconst mapStateToProps = state => {\n  return {\n    targetCity: state.weather.targetCity,\n    cities: state.weather.cities\n  };\n};\n\nconst fetchWeather = cityName => {\n  fetch(`https://api.weatherbit.io/v2.0/forecast/hourly?city=${cityName},cz&key=165c8bbb35604923b89f37cf29003df3&hours=2`).then(({\n    status,\n    json\n  }) => {\n    if (status !== 200) {\n      alert('Request status = ' + status);\n    }\n\n    console.log(json());\n    return json();\n  }).then(data => {\n    console.log('DATA: ', data);\n    console.log(data.data.map(item => item.temp));\n    return data;\n  });\n};\n\nconst mapDispatchToProps = dispatch => {\n  const setCity = event => dispatch({\n    type: SET_CITY,\n    payload: event.target.value\n  });\n\n  const addCity = cityName => {\n    const data = fetchWeather(cityName);\n    console.log('ADDCITY', data);\n    dispatch({\n      type: ADD_CITY,\n      payload: data\n    });\n  };\n\n  const resetCity = () => dispatch({\n    type: RESET_CITY,\n    payload: ''\n  });\n\n  return {\n    setCity: setCity,\n    addCity: addCity,\n    resetCity: resetCity\n  };\n};\n\nconst WeatherFormContainer = ({\n  targetCity,\n  setCity,\n  addCity\n}) => {\n  return React.createElement(WeatherForm, {\n    setCity: setCity,\n    city: targetCity,\n    addCity: addCity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  });\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherFormContainer);","map":{"version":3,"sources":["C:/javascript/s1-redux/src/features/Weather/containers/WeatherFormContainer.jsx"],"names":["React","WeatherForm","connect","SET_CITY","ADD_CITY","RESET_CITY","mapStateToProps","state","targetCity","weather","cities","fetchWeather","cityName","fetch","then","status","json","alert","console","log","data","map","item","temp","mapDispatchToProps","dispatch","setCity","event","type","payload","target","value","addCity","resetCity","WeatherFormContainer"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,UAA7B,QAA+C,kBAA/C;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLC,IAAAA,UAAU,EAAED,KAAK,CAACE,OAAN,CAAcD,UADrB;AAELE,IAAAA,MAAM,EAAEH,KAAK,CAACE,OAAN,CAAcC;AAFjB,GAAP;AAID,CALD;;AAOA,MAAMC,YAAY,GAAGC,QAAQ,IAAI;AAC/BC,EAAAA,KAAK,CACF,uDAAsDD,QAAS,kDAD7D,CAAL,CAGGE,IAHH,CAGQ,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAD,KAAsB;AAC1B,QAAID,MAAM,KAAK,GAAf,EAAoB;AAClBE,MAAAA,KAAK,CAAC,sBAAsBF,MAAvB,CAAL;AACD;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,EAAhB;AACA,WAAOA,IAAI,EAAX;AACD,GATH,EAUGF,IAVH,CAUQM,IAAI,IAAI;AACZF,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,IAAtB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACA,IAAL,CAAUC,GAAV,CAAcC,IAAI,IAAIA,IAAI,CAACC,IAA3B,CAAZ;AACA,WAAOH,IAAP;AACD,GAdH;AAeD,CAhBD;;AAkBA,MAAMI,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,QAAMC,OAAO,GAAGC,KAAK,IACnBF,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEzB,QAAR;AAAkB0B,IAAAA,OAAO,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAxC,GAAD,CADV;;AAEA,QAAMC,OAAO,GAAGpB,QAAQ,IAAI;AAC1B,UAAMQ,IAAI,GAAGT,YAAY,CAACC,QAAD,CAAzB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,IAAvB;AACAK,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAExB,QAAR;AAAkByB,MAAAA,OAAO,EAAET;AAA3B,KAAD,CAAR;AACD,GAJD;;AAKA,QAAMa,SAAS,GAAG,MAAMR,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAAEvB,UAAR;AAAoBwB,IAAAA,OAAO,EAAE;AAA7B,GAAD,CAAhC;;AAEA,SAAO;AACLH,IAAAA,OAAO,EAAEA,OADJ;AAELM,IAAAA,OAAO,EAAEA,OAFJ;AAGLC,IAAAA,SAAS,EAAEA;AAHN,GAAP;AAKD,CAfD;;AAiBA,MAAMC,oBAAoB,GAAG,CAAC;AAAE1B,EAAAA,UAAF;AAAckB,EAAAA,OAAd;AAAuBM,EAAAA;AAAvB,CAAD,KAAsC;AACjE,SAAO,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEN,OAAtB;AAA+B,IAAA,IAAI,EAAElB,UAArC;AAAiD,IAAA,OAAO,EAAEwB,OAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAFD;;AAIA,eAAe9B,OAAO,CACpBI,eADoB,EAEpBkB,kBAFoB,CAAP,CAGbU,oBAHa,CAAf","sourcesContent":["import React from 'react'\r\nimport WeatherForm from '../components/WeatherForm'\r\nimport { connect } from 'react-redux'\r\nimport { SET_CITY, ADD_CITY, RESET_CITY } from '../store/actions'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    targetCity: state.weather.targetCity,\r\n    cities: state.weather.cities,\r\n  }\r\n}\r\n\r\nconst fetchWeather = cityName => {\r\n  fetch(\r\n    `https://api.weatherbit.io/v2.0/forecast/hourly?city=${cityName},cz&key=165c8bbb35604923b89f37cf29003df3&hours=2`,\r\n  )\r\n    .then(({ status, json }) => {\r\n      if (status !== 200) {\r\n        alert('Request status = ' + status)\r\n      }\r\n      console.log(json())\r\n      return json()\r\n    })\r\n    .then(data => {\r\n      console.log('DATA: ', data)\r\n      console.log(data.data.map(item => item.temp))\r\n      return data\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  const setCity = event =>\r\n    dispatch({ type: SET_CITY, payload: event.target.value })\r\n  const addCity = cityName => {\r\n    const data = fetchWeather(cityName)\r\n    console.log('ADDCITY', data)\r\n    dispatch({ type: ADD_CITY, payload: data })\r\n  }\r\n  const resetCity = () => dispatch({ type: RESET_CITY, payload: '' })\r\n\r\n  return {\r\n    setCity: setCity,\r\n    addCity: addCity,\r\n    resetCity: resetCity,\r\n  }\r\n}\r\n\r\nconst WeatherFormContainer = ({ targetCity, setCity, addCity }) => {\r\n  return <WeatherForm setCity={setCity} city={targetCity} addCity={addCity} />\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(WeatherFormContainer)\r\n"]},"metadata":{},"sourceType":"module"}