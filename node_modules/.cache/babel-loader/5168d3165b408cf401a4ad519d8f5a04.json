{"ast":null,"code":"var _jsxFileName = \"C:\\\\javascript\\\\weather\\\\src\\\\features\\\\Weather\\\\containers\\\\WeatherFormContainer.jsx\";\nimport React from 'react';\nimport WeatherForm from '../components/WeatherForm';\nimport { connect } from 'react-redux';\nimport { SET_CITY, ADD_CITY } from '../store/actions';\n\nconst mapStateToProps = state => {\n  return {\n    targetCity: state.weather.targetCity,\n    cities: state.weather.cities\n  };\n}; // save to localStorage\n\n\nconst clearStorage = itemKey => {\n  localStorage.removeItem(itemKey);\n  window.location.reload();\n}; // update data\n\n\nconst updateForecast = cities => {\n  if (cities === []) return;\n  const updatedCities = cities.map(city => city.data = fetchWeather(city.name));\n  console.log(updatedCities);\n  return updatedCities;\n}; // fetch API\n\n\nconst fetchWeather = cityName => {\n  return fetch(`https://api.weatherbit.io/v2.0/forecast/hourly?city=${cityName},cz&key=165c8bbb35604923b89f37cf29003df3&hours=5`).then(response => {\n    if (response.status !== 200) {\n      alert('Request status = ' + response.status);\n    }\n\n    return response.json();\n  }).then(data => {\n    //console.log('DATA: ', data)\n    //console.log(data.data.map(item => item.temp))\n    return data;\n  });\n};\n\nconst mapDispatchToProps = dispatch => {\n  const setCity = event => dispatch({\n    type: SET_CITY,\n    payload: event.target.value\n  });\n\n  const addCity = cityName => {\n    return fetchWeather(cityName).then(data => dispatch({\n      type: ADD_CITY,\n      payload: data\n    }));\n  };\n\n  const resetCity = () => dispatch({\n    type: SET_CITY,\n    payload: ''\n  });\n\n  const addCityAndReset = payload => {\n    addCity(payload).then(resetCity);\n  };\n\n  return {\n    setCity: setCity,\n    addCityAndReset: addCityAndReset\n  };\n};\n\nconst WeatherFormContainer = ({\n  targetCity,\n  cities,\n  setCity,\n  addCityAndReset\n}) => {\n  return React.createElement(WeatherForm, {\n    updateForecast: updateForecast,\n    clearStorage: clearStorage,\n    setCity: setCity,\n    city: targetCity,\n    cities: cities,\n    addCityAndReset: addCityAndReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  });\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherFormContainer);","map":{"version":3,"sources":["C:/javascript/weather/src/features/Weather/containers/WeatherFormContainer.jsx"],"names":["React","WeatherForm","connect","SET_CITY","ADD_CITY","mapStateToProps","state","targetCity","weather","cities","clearStorage","itemKey","localStorage","removeItem","window","location","reload","updateForecast","updatedCities","map","city","data","fetchWeather","name","console","log","cityName","fetch","then","response","status","alert","json","mapDispatchToProps","dispatch","setCity","event","type","payload","target","value","addCity","resetCity","addCityAndReset","WeatherFormContainer"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherForm from '../components/WeatherForm'\r\nimport { connect } from 'react-redux'\r\nimport { SET_CITY, ADD_CITY } from '../store/actions'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    targetCity: state.weather.targetCity,\r\n    cities: state.weather.cities,\r\n  }\r\n}\r\n// save to localStorage\r\nconst clearStorage = itemKey => {\r\n  localStorage.removeItem(itemKey)\r\n  window.location.reload()\r\n}\r\n// update data\r\nconst updateForecast = cities => {\r\n  if (cities === []) return\r\n\r\n  const updatedCities = cities.map(\r\n    city => (city.data = fetchWeather(city.name)),\r\n  )\r\n\r\n  console.log(updatedCities)\r\n  return updatedCities\r\n}\r\n// fetch API\r\nconst fetchWeather = cityName => {\r\n  return fetch(\r\n    `https://api.weatherbit.io/v2.0/forecast/hourly?city=${cityName},cz&key=165c8bbb35604923b89f37cf29003df3&hours=5`,\r\n  )\r\n    .then(response => {\r\n      if (response.status !== 200) {\r\n        alert('Request status = ' + response.status)\r\n      }\r\n      return response.json()\r\n    })\r\n    .then(data => {\r\n      //console.log('DATA: ', data)\r\n      //console.log(data.data.map(item => item.temp))\r\n      return data\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  const setCity = event =>\r\n    dispatch({ type: SET_CITY, payload: event.target.value })\r\n  const addCity = cityName => {\r\n    return fetchWeather(cityName).then(data =>\r\n      dispatch({ type: ADD_CITY, payload: data }),\r\n    )\r\n  }\r\n  const resetCity = () => dispatch({ type: SET_CITY, payload: '' })\r\n  const addCityAndReset = payload => {\r\n    addCity(payload).then(resetCity)\r\n  }\r\n\r\n  return {\r\n    setCity: setCity,\r\n    addCityAndReset: addCityAndReset,\r\n  }\r\n}\r\n\r\nconst WeatherFormContainer = ({\r\n  targetCity,\r\n  cities,\r\n  setCity,\r\n  addCityAndReset,\r\n}) => {\r\n  return (\r\n    <WeatherForm\r\n      updateForecast={updateForecast}\r\n      clearStorage={clearStorage}\r\n      setCity={setCity}\r\n      city={targetCity}\r\n      cities={cities}\r\n      addCityAndReset={addCityAndReset}\r\n    />\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(WeatherFormContainer)\r\n"]},"metadata":{},"sourceType":"module"}