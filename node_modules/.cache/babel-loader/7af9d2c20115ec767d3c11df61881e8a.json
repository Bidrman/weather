{"ast":null,"code":"import { ADD_CITY, REMOVE_CITY, SET_CITY, UPDATE_CITIES, UPDATE_CITY, FETCH_START, FETCH_SUCCESS, FETCH_FAIL } from './actions';\nimport { loadStorage } from '../../../utils/localStore';\nconst preloadedState = loadStorage('weather');\nconst initialState = {\n  isLoading: false,\n  error_msg: '',\n  targetCity: '',\n  cities: preloadedState || []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_CITY:\n      return { ...state,\n        cities: [...state.cities, {\n          name: action.payload.city.name,\n          date: new Date(),\n          data: action.payload.list.filter((part, index) => index <= 3)\n        }]\n      };\n\n    case SET_CITY:\n      return { ...state,\n        targetCity: action.payload\n      };\n\n    case REMOVE_CITY:\n      return { ...state\n      };\n\n    case UPDATE_CITIES:\n      return { ...state,\n        cities: action.payload\n      };\n\n    case UPDATE_CITY:\n      return { ...state,\n        cities: state.cities.map(city => {\n          if (city.name === action.payload.name) {\n            city = action.payload;\n            return city;\n          }\n\n          return city;\n        })\n      };\n\n    case FETCH_START:\n      return { ...state,\n        isLoading: true\n      };\n\n    case FETCH_SUCCESS:\n      return { ...state,\n        isLoading: false\n      };\n\n    case FETCH_FAIL:\n      return { ...state,\n        isLoading: false,\n        error_msg: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/javascript/weather/src/features/Weather/store/weatherReducer.js"],"names":["ADD_CITY","REMOVE_CITY","SET_CITY","UPDATE_CITIES","UPDATE_CITY","FETCH_START","FETCH_SUCCESS","FETCH_FAIL","loadStorage","preloadedState","initialState","isLoading","error_msg","targetCity","cities","reducer","state","action","type","name","payload","city","date","Date","data","list","filter","part","index","map"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,QAAhC,EAA0CC,aAA1C,EAAyDC,WAAzD,EAAsEC,WAAtE,EAAmFC,aAAnF,EAAkGC,UAAlG,QAAoH,WAApH;AACA,SAAQC,WAAR,QAA0B,2BAA1B;AAEA,MAAMC,cAAc,GAAGD,WAAW,CAAC,SAAD,CAAlC;AAEA,MAAME,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,SAAS,EAAE,EAFQ;AAGnBC,EAAAA,UAAU,EAAE,EAHO;AAInBC,EAAAA,MAAM,EAAEL,cAAc,IAAI;AAJP,CAArB;;AAOA,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKlB,QAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAELF,QAAAA,MAAM,EAAE,CACN,GAAGE,KAAK,CAACF,MADH,EAEN;AACEK,UAAAA,IAAI,EAAEF,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBF,IAD5B;AAEEG,UAAAA,IAAI,EAAE,IAAIC,IAAJ,EAFR;AAGEC,UAAAA,IAAI,EAAEP,MAAM,CAACG,OAAP,CAAeK,IAAf,CAAoBC,MAApB,CAA2B,CAACC,IAAD,EAAMC,KAAN,KAAgBA,KAAK,IAAI,CAApD;AAHR,SAFM;AAFH,OAAP;;AAWF,SAAK1B,QAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELH,QAAAA,UAAU,EAAEI,MAAM,CAACG;AAFd,OAAP;;AAIF,SAAKnB,WAAL;AACE,aAAO,EACL,GAAGe;AADE,OAAP;;AAGF,SAAKb,aAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELF,QAAAA,MAAM,EAAEG,MAAM,CAACG;AAFV,OAAP;;AAIF,SAAKhB,WAAL;AACE,aAAM,EACJ,GAAGY,KADC;AAEJF,QAAAA,MAAM,EAAEE,KAAK,CAACF,MAAN,CAAae,GAAb,CAAiBR,IAAI,IAAI;AAC/B,cAAGA,IAAI,CAACF,IAAL,KAAcF,MAAM,CAACG,OAAP,CAAeD,IAAhC,EAAsC;AACpCE,YAAAA,IAAI,GAAGJ,MAAM,CAACG,OAAd;AAEA,mBAAOC,IAAP;AACD;;AACD,iBAAOA,IAAP;AACD,SAPO;AAFJ,OAAN;;AAWF,SAAKhB,WAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELL,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKL,aAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELL,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKJ,UAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELL,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,SAAS,EAAEK,MAAM,CAACG;AAHb,OAAP;;AAKF;AACE,aAAOJ,KAAP;AAxDF;AA0DD,CA3DD;;AA6DA,eAAeD,OAAf","sourcesContent":["import { ADD_CITY, REMOVE_CITY, SET_CITY, UPDATE_CITIES, UPDATE_CITY, FETCH_START, FETCH_SUCCESS, FETCH_FAIL } from './actions'\r\nimport {loadStorage} from '../../../utils/localStore'\r\n\r\nconst preloadedState = loadStorage('weather')\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  error_msg: '',\r\n  targetCity: '',\r\n  cities: preloadedState || [],\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n  case ADD_CITY:\r\n    return {\r\n      ...state,\r\n      cities: [\r\n        ...state.cities,\r\n        {\r\n          name: action.payload.city.name,\r\n          date: new Date(),\r\n          data: action.payload.list.filter((part,index) => index <= 3),\r\n        },\r\n      ],\r\n    }\r\n  case SET_CITY:\r\n    return {\r\n      ...state,\r\n      targetCity: action.payload,\r\n    }\r\n  case REMOVE_CITY:\r\n    return {\r\n      ...state,\r\n    }\r\n  case UPDATE_CITIES:\r\n    return {\r\n      ...state,\r\n      cities: action.payload,\r\n    }\r\n  case UPDATE_CITY:\r\n    return{\r\n      ...state,\r\n      cities: state.cities.map(city => {\r\n        if(city.name === action.payload.name) {\r\n          city = action.payload\r\n\r\n          return city\r\n        }\r\n        return city\r\n      }),\r\n    }\r\n  case FETCH_START:\r\n    return {\r\n      ...state,\r\n      isLoading: true,\r\n    }\r\n  case FETCH_SUCCESS:\r\n    return {\r\n      ...state,\r\n      isLoading: false,\r\n    }\r\n  case FETCH_FAIL:\r\n    return {\r\n      ...state,\r\n      isLoading: false,\r\n      error_msg: action.payload,\r\n    }\r\n  default:\r\n    return state\r\n  }\r\n}\r\n\r\nexport default reducer\r\n"]},"metadata":{},"sourceType":"module"}