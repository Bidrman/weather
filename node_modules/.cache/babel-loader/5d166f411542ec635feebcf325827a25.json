{"ast":null,"code":"var _jsxFileName = \"C:\\\\javascript\\\\weather\\\\src\\\\features\\\\Weather\\\\containers\\\\WeatherListContainer.jsx\";\nimport React from 'react';\nimport WeatherList from '../components/WeatherList';\nimport WeatherItemContainer from './WeatherItemContainer';\nimport { SET_CITY, ADD_CITY, UPDATE_CITIES } from '../store/actions';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { lifecycle } from 'recompose';\n\nconst mapStateToProps = state => {\n  return {\n    cities: state.weather.cities\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const setCity = event => dispatch({\n    type: SET_CITY,\n    payload: event.target.value\n  });\n\n  const addCity = cityName => {\n    return fetchWeather(cityName).then(data => dispatch({\n      type: ADD_CITY,\n      payload: data\n    }));\n  };\n\n  const resetCity = () => dispatch({\n    type: SET_CITY,\n    payload: ''\n  });\n\n  const addCityAndReset = payload => {\n    addCity(payload).then(resetCity);\n  };\n\n  const updateCityForecast = cities => {\n    const promises = cities.map(city => city.data = fetchWeather(city.name)); // MUSI SE OPRAVIT kvuli novymu API\n\n    Promise.all(promises).then(values => {\n      const transformedData = values.map(city => {\n        return {\n          name: city.city.name,\n          date: new Date(),\n          data: city.list.filter((part, index) => index <= 3)\n        };\n      });\n      dispatch({\n        type: UPDATE_CITIES,\n        payload: transformedData\n      });\n    });\n  };\n\n  return {\n    setCity: setCity,\n    addCityAndReset: addCityAndReset,\n    updateCityForecast: updateCityForecast\n  };\n};\n\nconst WeatherListContainer = props => {\n  // ZDE bude componentDidMount?\n  const {\n    cities\n  } = props;\n  const cityData = cities.map(oneCity => {\n    return React.createElement(WeatherItemContainer, {\n      name: oneCity.name,\n      data: oneCity.data,\n      key: oneCity.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    });\n  });\n  return React.createElement(WeatherList, {\n    item: cityData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  });\n};\n\nconst enhance = compose(connect(mapStateToProps, mapDispatchToProps), lifecycle({\n  componentDidMount() {\n    this.props.updateCityForecast(this.props.cities);\n  }\n\n}));\nexport default enhance(WeatherListContainer);","map":{"version":3,"sources":["C:/javascript/weather/src/features/Weather/containers/WeatherListContainer.jsx"],"names":["React","WeatherList","WeatherItemContainer","SET_CITY","ADD_CITY","UPDATE_CITIES","compose","connect","lifecycle","mapStateToProps","state","cities","weather","mapDispatchToProps","dispatch","setCity","event","type","payload","target","value","addCity","cityName","fetchWeather","then","data","resetCity","addCityAndReset","updateCityForecast","promises","map","city","name","Promise","all","values","transformedData","date","Date","list","filter","part","index","WeatherListContainer","props","cityData","oneCity","enhance","componentDidMount"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherList from '../components/WeatherList'\r\nimport WeatherItemContainer from './WeatherItemContainer'\r\nimport { SET_CITY, ADD_CITY, UPDATE_CITIES } from '../store/actions'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { lifecycle } from 'recompose'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    cities: state.weather.cities,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  const setCity = (event) =>\r\n    dispatch({ type: SET_CITY, payload: event.target.value })\r\n  const addCity = (cityName) => {\r\n    return fetchWeather(cityName).then((data) =>\r\n      dispatch({ type: ADD_CITY, payload: data }),\r\n    )\r\n  }\r\n  const resetCity = () => dispatch({ type: SET_CITY, payload: '' })\r\n  const addCityAndReset = (payload) => {\r\n    addCity(payload).then(resetCity)\r\n  }\r\n\r\n  const updateCityForecast = (cities) => {\r\n    const promises = cities.map((city) => (city.data = fetchWeather(city.name)))\r\n\r\n    // MUSI SE OPRAVIT kvuli novymu API\r\n    Promise.all(promises).then((values) => {\r\n      const transformedData = values.map((city) => {\r\n        return {\r\n          name: city.city.name,\r\n          date: new Date(),\r\n          data: city.list.filter((part, index) => index <= 3),\r\n        }\r\n      })\r\n      dispatch({ type: UPDATE_CITIES, payload: transformedData })\r\n    })\r\n  }\r\n\r\n  return {\r\n    setCity: setCity,\r\n    addCityAndReset: addCityAndReset,\r\n    updateCityForecast: updateCityForecast,\r\n  }\r\n}\r\n\r\nconst WeatherListContainer = (props) => {\r\n  // ZDE bude componentDidMount?\r\n\r\n  const { cities } = props\r\n  const cityData = cities.map((oneCity) => {\r\n    return (\r\n      <WeatherItemContainer\r\n        name={oneCity.name}\r\n        data={oneCity.data}\r\n        key={oneCity.name}\r\n      />\r\n    )\r\n  })\r\n\r\n  return <WeatherList item={cityData} />\r\n}\r\n\r\nconst enhance: Function = compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  lifecycle({\r\n    componentDidMount() {\r\n      this.props.updateCityForecast(this.props.cities)\r\n    },\r\n  }),\r\n)\r\n\r\nexport default enhance(WeatherListContainer)\r\n"]},"metadata":{},"sourceType":"module"}