{"ast":null,"code":"var _jsxFileName = \"C:\\\\javascript\\\\weather\\\\src\\\\features\\\\Weather\\\\containers\\\\WeatherFormContainer.jsx\";\nimport React from 'react';\nimport WeatherForm from '../components/WeatherForm';\nimport { connect } from 'react-redux';\nimport { SET_CITY, ADD_CITY, UPDATE_CITIES } from '../store/actions';\nimport { openWeatherMap } from '../../FetchAPI/fetchWeather';\n\nconst mapStateToProps = state => {\n  return {\n    targetCity: state.weather.targetCity,\n    cities: state.weather.cities\n  };\n}; // save to localStorage\n\n\nconst clearStorage = itemKey => {\n  localStorage.removeItem(itemKey);\n  window.location.reload();\n}; // update data\n\n\nconst updateForecast = cities => {\n  if (cities === []) return;\n  const updatedCities = cities.map(city => city.data = openWeatherMap(city.name)); //console.log(updatedCities)\n\n  return updatedCities;\n};\n\nconst mapDispatchToProps = dispatch => {\n  const setCity = event => dispatch({\n    type: SET_CITY,\n    payload: event.target.value\n  });\n\n  const addCity = cityName => {\n    console.log('AXIOS volani', openWeatherMap(cityName));\n    return openWeatherMap(cityName).then(data => dispatch({\n      type: ADD_CITY,\n      payload: data\n    }));\n  };\n\n  const resetCity = () => dispatch({\n    type: SET_CITY,\n    payload: ''\n  });\n\n  const addCityAndReset = payload => {\n    addCity(payload).then(resetCity);\n  }; // prepsat na axios fetch (casem)\n\n\n  const updateCityForecast = cities => {\n    const promises = cities.map(city => city.data = fetchWeather(city.name));\n    Promise.all(promises).then(values => {\n      const transformedData = values.map(city => {\n        return {\n          name: city.city_name,\n          date: new Date(),\n          data: city.data\n        };\n      });\n      dispatch({\n        type: UPDATE_CITIES,\n        payload: transformedData\n      });\n    });\n  };\n\n  return {\n    setCity: setCity,\n    addCityAndReset: addCityAndReset,\n    updateCityForecast: updateCityForecast\n  };\n};\n\nconst WeatherFormContainer = ({\n  targetCity,\n  cities,\n  setCity,\n  addCityAndReset,\n  updateCityForecast\n}) => {\n  return React.createElement(WeatherForm, {\n    updateForecast: updateCityForecast,\n    clearStorage: clearStorage,\n    setCity: setCity,\n    city: targetCity,\n    cities: cities,\n    addCityAndReset: addCityAndReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  });\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherFormContainer);","map":{"version":3,"sources":["C:/javascript/weather/src/features/Weather/containers/WeatherFormContainer.jsx"],"names":["React","WeatherForm","connect","SET_CITY","ADD_CITY","UPDATE_CITIES","openWeatherMap","mapStateToProps","state","targetCity","weather","cities","clearStorage","itemKey","localStorage","removeItem","window","location","reload","updateForecast","updatedCities","map","city","data","name","mapDispatchToProps","dispatch","setCity","event","type","payload","target","value","addCity","cityName","console","log","then","resetCity","addCityAndReset","updateCityForecast","promises","fetchWeather","Promise","all","values","transformedData","city_name","date","Date","WeatherFormContainer"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherForm from '../components/WeatherForm'\r\nimport { connect } from 'react-redux'\r\nimport { SET_CITY, ADD_CITY, UPDATE_CITIES } from '../store/actions'\r\nimport { openWeatherMap } from '../../FetchAPI/fetchWeather'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    targetCity: state.weather.targetCity,\r\n    cities: state.weather.cities,\r\n  }\r\n}\r\n// save to localStorage\r\nconst clearStorage = (itemKey) => {\r\n  localStorage.removeItem(itemKey)\r\n  window.location.reload()\r\n}\r\n// update data\r\nconst updateForecast = (cities) => {\r\n  if (cities === []) return\r\n\r\n  const updatedCities = cities.map(\r\n    (city) => (city.data = openWeatherMap(city.name)),\r\n  )\r\n\r\n  //console.log(updatedCities)\r\n  return updatedCities\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  const setCity = (event) =>\r\n    dispatch({ type: SET_CITY, payload: event.target.value })\r\n  const addCity = (cityName) => {\r\n    console.log('AXIOS volani', openWeatherMap(cityName))\r\n\r\n    return openWeatherMap(cityName).then((data) =>\r\n      dispatch({ type: ADD_CITY, payload: data }),\r\n    )\r\n  }\r\n  const resetCity = () => dispatch({ type: SET_CITY, payload: '' })\r\n  const addCityAndReset = (payload) => {\r\n    addCity(payload).then(resetCity)\r\n  }\r\n\r\n  // prepsat na axios fetch (casem)\r\n  const updateCityForecast = (cities) => {\r\n    const promises = cities.map((city) => (city.data = fetchWeather(city.name)))\r\n\r\n    Promise.all(promises).then((values) => {\r\n      const transformedData = values.map((city) => {\r\n        return {\r\n          name: city.city_name,\r\n          date: new Date(),\r\n          data: city.data,\r\n        }\r\n      })\r\n      dispatch({ type: UPDATE_CITIES, payload: transformedData })\r\n    })\r\n  }\r\n\r\n  return {\r\n    setCity: setCity,\r\n    addCityAndReset: addCityAndReset,\r\n    updateCityForecast: updateCityForecast,\r\n  }\r\n}\r\n\r\nconst WeatherFormContainer = ({\r\n  targetCity,\r\n  cities,\r\n  setCity,\r\n  addCityAndReset,\r\n  updateCityForecast,\r\n}) => {\r\n  return (\r\n    <WeatherForm\r\n      updateForecast={updateCityForecast}\r\n      clearStorage={clearStorage}\r\n      setCity={setCity}\r\n      city={targetCity}\r\n      cities={cities}\r\n      addCityAndReset={addCityAndReset}\r\n    />\r\n  )\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(WeatherFormContainer)\r\n"]},"metadata":{},"sourceType":"module"}