{"ast":null,"code":"import { fetchWeather } from '../features/FetchAPI/fetchWeather';\nimport { FETCH_START, FETCH_SUCCESS, FETCH_FAIL, UPDATE_CITY } from '../features/Weather/store/actions';\nexport const fetchForecastStart = store => next => async action => {\n  if (action.type === FETCH_START) {\n    try {\n      const response = await fetchWeather(action.payload);\n      next({\n        type: FETCH_SUCCESS,\n        payload: response\n      });\n    } catch (error) {\n      next({\n        type: FETCH_FAIL,\n        payload: error\n      });\n    }\n  }\n\n  return next(action);\n};\nexport const fetchForecastSuccess = store => next => async action => {\n  console.log(action);\n\n  if (action.type === FETCH_SUCCESS) {\n    // opetovne volani\n    console.log('payload.name', action.payload.city.name);\n    setTimeout(next({\n      type: FETCH_START,\n      payload: action.payload.city.name\n    }), 10000); //console.log('AKCE FETCH SUCCESS', action)\n\n    const new_data = {\n      name: action.payload.city.name,\n      date: new Date(),\n      data: action.payload.list.filter((piece, index) => index <= 3)\n    };\n    const next_action = {\n      type: UPDATE_CITY,\n      payload: new_data\n    };\n    console.log('novy data', next_action);\n    return next(next_action);\n  }\n\n  return next(action);\n};\nexport const fetchForecastFail = store => next => async action => {\n  console.log(action);\n\n  if (action.type === FETCH_FAIL) {\n    alert('spojeni se serverem nebylo uspesne, nastala chyba: ' + action.payload);\n    return next(action);\n  }\n\n  return next(action);\n};","map":{"version":3,"sources":["C:/javascript/weather/src/middlewares/ForecastMiddleware.jsx"],"names":["fetchWeather","FETCH_START","FETCH_SUCCESS","FETCH_FAIL","UPDATE_CITY","fetchForecastStart","store","next","action","type","response","payload","error","fetchForecastSuccess","console","log","city","name","setTimeout","new_data","date","Date","data","list","filter","piece","index","next_action","fetchForecastFail","alert"],"mappings":"AAAA,SAASA,YAAT,QAA6B,mCAA7B;AACA,SACEC,WADF,EAEEC,aAFF,EAGEC,UAHF,EAIEC,WAJF,QAKO,mCALP;AAOA,OAAO,MAAMC,kBAAkB,GAAIC,KAAD,IAAYC,IAAD,IAAU,MAAOC,MAAP,IAAkB;AACvE,MAAIA,MAAM,CAACC,IAAP,KAAgBR,WAApB,EAAiC;AAC/B,QAAI;AACF,YAAMS,QAAQ,GAAG,MAAMV,YAAY,CAACQ,MAAM,CAACG,OAAR,CAAnC;AACAJ,MAAAA,IAAI,CAAC;AAAEE,QAAAA,IAAI,EAAEP,aAAR;AAAuBS,QAAAA,OAAO,EAAED;AAAhC,OAAD,CAAJ;AACD,KAHD,CAGE,OAAOE,KAAP,EAAc;AACdL,MAAAA,IAAI,CAAC;AAAEE,QAAAA,IAAI,EAAEN,UAAR;AAAoBQ,QAAAA,OAAO,EAAEC;AAA7B,OAAD,CAAJ;AACD;AACF;;AAED,SAAOL,IAAI,CAACC,MAAD,CAAX;AACD,CAXM;AAaP,OAAO,MAAMK,oBAAoB,GAAIP,KAAD,IAAYC,IAAD,IAAU,MAAOC,MAAP,IAAkB;AACzEM,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;;AAEA,MAAIA,MAAM,CAACC,IAAP,KAAgBP,aAApB,EAAmC;AACjC;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BP,MAAM,CAACG,OAAP,CAAeK,IAAf,CAAoBC,IAAhD;AACAC,IAAAA,UAAU,CACRX,IAAI,CAAC;AAAEE,MAAAA,IAAI,EAAER,WAAR;AAAqBU,MAAAA,OAAO,EAAEH,MAAM,CAACG,OAAP,CAAeK,IAAf,CAAoBC;AAAlD,KAAD,CADI,EAER,KAFQ,CAAV,CAHiC,CAQjC;;AAEA,UAAME,QAAQ,GAAG;AACfF,MAAAA,IAAI,EAAET,MAAM,CAACG,OAAP,CAAeK,IAAf,CAAoBC,IADX;AAEfG,MAAAA,IAAI,EAAE,IAAIC,IAAJ,EAFS;AAGfC,MAAAA,IAAI,EAAEd,MAAM,CAACG,OAAP,CAAeY,IAAf,CAAoBC,MAApB,CAA2B,CAACC,KAAD,EAAQC,KAAR,KAAkBA,KAAK,IAAI,CAAtD;AAHS,KAAjB;AAMA,UAAMC,WAAW,GAAG;AAAElB,MAAAA,IAAI,EAAEL,WAAR;AAAqBO,MAAAA,OAAO,EAAEQ;AAA9B,KAApB;AAEAL,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBY,WAAzB;AAEA,WAAOpB,IAAI,CAACoB,WAAD,CAAX;AACD;;AACD,SAAOpB,IAAI,CAACC,MAAD,CAAX;AACD,CA1BM;AA4BP,OAAO,MAAMoB,iBAAiB,GAAItB,KAAD,IAAYC,IAAD,IAAU,MAAOC,MAAP,IAAkB;AACtEM,EAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;;AAEA,MAAIA,MAAM,CAACC,IAAP,KAAgBN,UAApB,EAAgC;AAC9B0B,IAAAA,KAAK,CACH,wDAAwDrB,MAAM,CAACG,OAD5D,CAAL;AAIA,WAAOJ,IAAI,CAACC,MAAD,CAAX;AACD;;AAED,SAAOD,IAAI,CAACC,MAAD,CAAX;AACD,CAZM","sourcesContent":["import { fetchWeather } from '../features/FetchAPI/fetchWeather'\r\nimport {\r\n  FETCH_START,\r\n  FETCH_SUCCESS,\r\n  FETCH_FAIL,\r\n  UPDATE_CITY,\r\n} from '../features/Weather/store/actions'\r\n\r\nexport const fetchForecastStart = (store) => (next) => async (action) => {\r\n  if (action.type === FETCH_START) {\r\n    try {\r\n      const response = await fetchWeather(action.payload)\r\n      next({ type: FETCH_SUCCESS, payload: response })\r\n    } catch (error) {\r\n      next({ type: FETCH_FAIL, payload: error })\r\n    }\r\n  }\r\n\r\n  return next(action)\r\n}\r\n\r\nexport const fetchForecastSuccess = (store) => (next) => async (action) => {\r\n  console.log(action)\r\n\r\n  if (action.type === FETCH_SUCCESS) {\r\n    // opetovne volani\r\n    console.log('payload.name', action.payload.city.name)\r\n    setTimeout(\r\n      next({ type: FETCH_START, payload: action.payload.city.name }),\r\n      10000,\r\n    )\r\n\r\n    //console.log('AKCE FETCH SUCCESS', action)\r\n\r\n    const new_data = {\r\n      name: action.payload.city.name,\r\n      date: new Date(),\r\n      data: action.payload.list.filter((piece, index) => index <= 3),\r\n    }\r\n\r\n    const next_action = { type: UPDATE_CITY, payload: new_data }\r\n\r\n    console.log('novy data', next_action)\r\n\r\n    return next(next_action)\r\n  }\r\n  return next(action)\r\n}\r\n\r\nexport const fetchForecastFail = (store) => (next) => async (action) => {\r\n  console.log(action)\r\n\r\n  if (action.type === FETCH_FAIL) {\r\n    alert(\r\n      'spojeni se serverem nebylo uspesne, nastala chyba: ' + action.payload,\r\n    )\r\n\r\n    return next(action)\r\n  }\r\n\r\n  return next(action)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}